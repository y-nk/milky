package martian.soup.basics{	import flash.display.*;		import flash.events.MouseEvent;	import flash.geom.Matrix;		import martian.soup.utils.Color;	import martian.soup.events.SettingEvent;		public class ColorSpectrum extends Sprite	{		private var spectrum:Sprite = new Sprite;		private var bitmap:Bitmap;		private var bitmapData:BitmapData;		private var $width:int;		private var $height:int;		private var $color:Array;		public function get value():Array { return $color; }				public function ColorSpectrum(width:int = 300, height:int = 150)		{			$width = width;			$height = height;						bitmapData = new BitmapData(width, height);			bitmap = new Bitmap(bitmapData);						addChild(bitmap);			draw();						addEventListener(MouseEvent.MOUSE_DOWN, mouseDown, false, 1000);		}				private function draw():void		{			var percent:Number;			var rad:Number;			var color:Number;			var colorArray:Array = new Array(3);			var matrixW:Matrix;			var matrixB:Matrix;						spectrum.graphics.clear();						for(var i:int = 0; i < width; i++)			{				percent = i / width;				rad = (-360 * percent) * (Math.PI / 180);								colorArray[0] = Math.cos(rad) * 127 + 128 << 16;				colorArray[1] = Math.cos(rad + 2 * Math.PI / 3) * 127 + 128 << 8;				colorArray[2] = Math.cos(rad + 4 * Math.PI / 3) * 127 + 128;								color  = colorArray[0] | colorArray[1] | colorArray[2];								matrixW = new Matrix();					matrixW.createGradientBox(1, height / 2, Math.PI * 0.5, 0, 0);									matrixB = new Matrix();					matrixB.createGradientBox(1, height / 2, Math.PI * 0.5, 0, height / 2);								spectrum.graphics.lineStyle(1, 0, 1, false, LineScaleMode.NONE, CapsStyle.NONE);				spectrum.graphics.lineGradientStyle(GradientType.LINEAR, [0xFFFFFF, color], [100, 100], [0, 255], matrixW);				spectrum.graphics.moveTo(i, 0);				spectrum.graphics.lineTo(i, height / 2);				spectrum.graphics.lineGradientStyle(GradientType.LINEAR, [color, 0], [100, 100], [0, 255], matrixB);				spectrum.graphics.moveTo(i, height / 2);				spectrum.graphics.lineTo(i, height);			}						bitmapData.draw(spectrum);						var border:Sprite = new Sprite;				border.graphics.lineStyle(1, 0x333333);				border.graphics.drawRect(-1, -1, spectrum.width + 1, spectrum.height);				border.x = spectrum.x;				border.y = spectrum.y;				addChild(border);		}				private function mouseDown(e:MouseEvent):void		{			e.stopImmediatePropagation();						mouseMove(e);						addEventListener(MouseEvent.MOUSE_MOVE, mouseMove, false, 1000);			stage.addEventListener(MouseEvent.MOUSE_UP, mouseUp, false, 1000);		}				private function mouseMove(e:MouseEvent):void		{			e.stopImmediatePropagation();						$color = Color.INTtoRGB(bitmapData.getPixel(mouseX, mouseY));						dispatchEvent(new SettingEvent(SettingEvent.SPECTRUM));		}				private function mouseUp(e:MouseEvent):void		{			e.stopImmediatePropagation();						removeEventListener(MouseEvent.MOUSE_MOVE, mouseMove);			stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUp);		}	}}